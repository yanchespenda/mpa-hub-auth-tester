import axios from 'axios';
import Head from 'next/head'
import { Fragment, useEffect, useState } from 'react';
import { useCookies } from 'react-cookie';
import Cookies from 'universal-cookie';
import styles from '../styles/Home.module.css'

const cookies = new Cookies();

const COOKIE_TOKEN = "SID-MYPONYASIA"
const COOKIE_REFRESH_TOKEN = "SIDR-MYPONYASIA"

interface RefreshToken {
  data: {
    acces_token_expired: string
    access_token: string
    refresh_token: string
    refresh_token_expired: string
  }
}

interface ResponseMe {
  data: {
    email: string
    id: string
    name: string
    role: string
  }
}

const BaseUrl = "https://api-hub.myponyasia.com"

const COOKIE_DOMAIN = '.myponyasia.com'

axios.interceptors.request.use(async (config) => {

  if (cookies.get(COOKIE_TOKEN)) {
    config.headers.Authorization = `Bearer ${cookies.get(COOKIE_TOKEN)}`
  } else if (cookies.get(COOKIE_REFRESH_TOKEN)) {
    try {
      const response = await axios.post<RefreshToken>(`${BaseUrl}/oauth/refresh-token`, null, {
        headers: {
          "Authorization": `Bearer ${cookies.get(COOKIE_REFRESH_TOKEN)}`
        },
      })

      if (response.status === 200) {
        cookies.set(COOKIE_TOKEN, response.data.data.access_token, {
          path: '/',
          domain: COOKIE_DOMAIN,
          expires: new Date(response.data.data.acces_token_expired),
        })
        cookies.set(COOKIE_REFRESH_TOKEN, response.data.data.refresh_token, {
          path: '/',
          domain: COOKIE_DOMAIN,
          expires: new Date(response.data.data.refresh_token_expired),
        })

        config.headers.Authorization = response.data.data.access_token
      }
    } catch (error) {
      console.log("error COOKIE_REFRESH_TOKEN", error)
    }
  }

  return config
}, null)

export default function Home() {
  const [cookies] = useCookies([COOKIE_TOKEN, COOKIE_REFRESH_TOKEN])
  const [isLoggedIn, setIsLoggedIn] = useState(false)
  const [user, setUser] = useState<ResponseMe | null>(null)

  useEffect(() => {
    if (cookies[COOKIE_TOKEN]) {
      console.log("Cookie COOKIE_TOKEN is set", cookies[COOKIE_TOKEN])
      axios.get<ResponseMe>(`${BaseUrl}/v1/user/me`).then(response => {
        setUser(response.data)
        setIsLoggedIn(true)
      })
    } else {
      console.log("Cookie COOKIE_TOKEN is not set")
    }
  }, [cookies]);

  
  return (
    <div className={styles.container}>
      <Head>
        <title>MPA Hub Auth Tester</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className='text-center'>Status Auth: { isLoggedIn ? 'PASS' : 'FAIL' }</div>
        <div className='mt-24'></div>
        {!isLoggedIn ? (
          <Fragment>
            <a href="https://oauth.myponyasia.com/?action=signin&redirect=https://oauth-tester.myponyasia.com">Click here to auth</a>
          </Fragment>
        ) : (
          <Fragment>
            {user ? (
              <Fragment>
                ID: {user.data.id}<br />
                Name: {user.data.name}<br />
                Email: {user.data.email}<br />
                Role: {user.data.role}<br />
              </Fragment>
            ) : null}
          </Fragment>
        )}
      </main>
    </div>
  )
}
